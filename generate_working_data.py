# Python 3.x
#

import numpy as np

import okctools


def function1(df):
    """DataFrame -> DataFrame
    Take a DataFrame generated by the OKCScraper and transform some part of it
    to make it better suited for analysis.
    """

    pass


def remove_empty_profiles(df):
    """DataFrame -> DataFrame
    Remove empty profiles from OKC profiles DataFrame. This is straightforward
    because empty profiles will only contain a username and nothing else.
    """

    df.drop(index=df.index[df.name.isnull().values], inplace=True)
    df.reset_index(drop=True, inplace=True)


def create_wordcount(df):
    """DataFrame -> DataFrame
    Use the 'essays' column of an OKC profiles DataFrame to create a new
    column of word counts.
    """

    if 'essays' not in df.columns:
        print('Input DataFrame does not contain column "essays".')
        return df

    wordcounts = list(map(lambda essay: okctools.count_words(essay),
                          df.loc[:, 'essays']))
    # "df.loc[:, wordcount] = stuff" gives a warning
    df = df.assign(wordcount=wordcounts)

    return df


def lists_to_dummies(df):
    """DataFrame -> DataFrame
    Turn list values into dummy variables. For example, df.orientation[0] might
    be the list ['pansexual','queer'], which would be turned into the dummy
    variables orientation_pansexual and orientation_queer
    """

    # Grab all columns whose values are lists, excluding 'essays'
    listcols = []
    for col in df.drop(columns='essays').columns:
        if all(df[col].isnull()):
            print('Column "{}" has no valid values. You can remove these with '
                  'the "remove_empty_columns" function'
                  .format(col))
            continue
        elif type(df[col][df[col].notna()].iloc[0]) == list:
            listcols.append(col)

    print(listcols)
    for col in listcols:
        valueset = set()
        for valuelist in df[df[col].notna()][col]:
            for value in valuelist:
                valueset.add(value)


def remove_empty_columns(df):
    """DataFrame -> DataFrame
    Remove columns in DataFrame that have no valid values (i.e. all NaN)
    """

    emptylist = []
    for col in df.columns:
        if all(df[col].isnull()):
            emptylist.append(col)

    # Do not drop in place, as that will modify the actual df used as input.
    df.drop(columns=emptylist, inplace=True)


def repair_lang_features(df):
    """DataFrame -> DataFrame
    Fix lang_primary and lang_secondary fields from data collected using older
    versions of fetchusers.py that resulted in stray words being collected into
    the data such as 'very' and 'it'
    """

    df.lang_primary.fillna(value=np.nan, inplace=True)
    df.lang_secondary.fillna(value=np.nan, inplace=True)
    # List of languages directly from OKC website
    langs = open('okc_lang_options.txt', 'r').read().lower().splitlines()

    lang_columns = ['lang_primary', 'lang_secondary']
    for column in lang_columns:
        lang_col_new = []
        for langlist in df[column]:
            langlist_new = []
            langset = set()  # To check and avoid duplicates
            if langlist is np.nan:
                lang_col_new.append(np.nan)
                continue
            if 'c' in langlist:
                langlist_new.append('c++')
            if 'sign' in langlist:
                langlist_new.append('sign language')
            for lang in langlist:
                if lang in langs and lang not in langset:
                    langlist_new.append(lang)
                    langset.add(lang)
            lang_col_new.append(langlist_new)
        df[column] = lang_col_new


def main():
    infolder = 'data/input/'
    outfolder = 'data/working/'

    df_raw = okctools.load_profiles_df(version='py3')
    df_no_empty = remove_empty_profiles(df_raw)
    df = create_wordcount(df_no_empty)
    df.drop(['essays', 'city', 'region'], inplace=True)


if __name__ == "__main__":
    main()
